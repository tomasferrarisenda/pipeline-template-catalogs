@Library('global-shared-library')_

/* Pipeline */
pipeline {
    agent { label "gradleContainerBuilds" }

    options { 
        disableConcurrentBuilds()
        skipDefaultCheckout true
    }

    environment {
      HOME           = "${WORKSPACE}"
    }

    stages {
        stage ('CleanWs & checkout SCM') {
            when {
                expression {
                    if (env.BRANCH_NAME != 'main') {
                        println("#####################################################")
                        println("#####################################################")
                        println(" ")
                        println("Sorry... This pipeline only runs on the 'main' branch.")
                        println(" ")
                        println("#####################################################")
                        println("#####################################################")
                        error("This pipeline only runs on the 'main' branch.")
                    }
                    return true
                }
            }
            steps {
                script {
                    checkout scm
                }
              }
        }

        stage ('Preparation') {
            steps {
                script {
                  env.DOCKERFILES           = dockerfiles
                  env.GITHUB_ORGANIZATION   = github_organization.toLowerCase()
                  env.GITHUB_REPO           = github_repo.toLowerCase()
                  env.DOCKER_USERNAME       = docker_username.toLowerCase()
                }
            }
        }

        stage('Gradle tests') {
            when {
                expression { run_tests }
            }
            steps {
                container('gradle') {
                    script {
                        gradle.wrapper()
                        gradle.clean()
                        gradle.compileJava()
                        gradle.test()
                    }
                }
            }
        }

        stage('Gradle-Docker build & push image') {
            when {
                expression { dockerfiles }
            }
            steps {
                container('gradle') {
                    script {
                        gradle.microBundle()
                    }
                }
                container('docker') {
                    script {
                        dockerBuild.login()
                        dockerBuild.build(env.DOCKER_USERNAME + "/" + env.GITHUB_REPO + ":" + env.BUILD_NUMBER)
                        dockerBuild.push(env.DOCKER_USERNAME + "/" + env.GITHUB_REPO + ":" + env.BUILD_NUMBER)
                    }
                }
            }
        }

        stage ('Update values in helm chart (deploy)') {
            steps {
                script {
                    checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: env.GITHUB_REPO + '-helm-chart']], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/' + env.GITHUB_ORGANIZATION + '/' + env.GITHUB_REPO + '-helm-chart.git']])
                    dir(env.GITHUB_REPO + '-helm-chart') {
                        updateValues.updateDev(tag: env.BUILD_NUMBER)
                        updateValues.updateStage(tag: env.BUILD_NUMBER)
                        updateValues.updateProd(tag: env.BUILD_NUMBER)
                        gitCommit.commitAndPush(email: "jenkins@jenkins.com", organization: env.GITHUB_ORGANIZATION, service: env.GITHUB_REPO + '-helm-chart')
                    }
                }
            }
        }
    }
}
