@Library('global-shared-library')_

/* Pipeline */
pipeline {
  agent { label "gradleContainerBuilds" }

  options { 
      disableConcurrentBuilds()
      skipDefaultCheckout true
  }

  environment {
     HOME           = "${WORKSPACE}"
  }

  stages {
    stage ('CleanWs & checkout SCM') {
        when {
            // Run only if branch is main
            branch "main"
            // allOf {
            //   // expression { dockerfiles }
            // }
        }
        steps {
            script {
                deleteDir()
                checkout scm
            }
          }
    }

    stage ('Preparation') {
        // when {
        //     previousStages() == 'SUCCESS'
        // }
        steps {
            script {
              env.DOCKERFILES           = dockerfiles
              env.GITHUB_ORGANIZATION   = github_organization.toLowerCase()
              env.GITHUB_REPO           = github_repo.toLowerCase()
              env.DOCKER_USERNAME       = docker_username.toLowerCase()
            }
        }
    }

    stage('Gradle test') {
        when {
            // Run only if branch is main 
            expression { run_tests }
            // allOf {
            //   // expression { dockerfiles }
            //   // branch "main"
            //   expression { run_tests }
            //   // previos stages were succesful
            //   previousStages() == 'SUCCESS'
            // }
        }
        steps {
            container('gradle') {
                script {
                    gradle.wrapper()
                    gradle.build()
                    gradle.test()
                }
            }
        }
    }

    stage('Gradle-Docker build & push image') {
        when {
            allOf {
                expression { dockerfiles }
                // branch "main"
            }
        }
        steps {
            container('gradle') {
                script {
                    gradle.microBundle()
                }
            }
            container('gradle') {
                script {
                    gradle.microBundle()
                }
            }
            container('docker') {
                script {
                    dockerBuild.login()
                    dockerBuild.build(env.DOCKER_USERNAME + "/" + env.GITHUB_REPO + ":" + env.BUILD_NUMBER)
                    dockerBuild.push(env.DOCKER_USERNAME + "/" + env.GITHUB_REPO + ":" + env.BUILD_NUMBER)
                }
            }
        }
    }

    stage ('Update values in helm chart (deploy)') {
        steps {
            script {
                checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: env.GITHUB_REPO + '-helm-chart']], userRemoteConfigs: [[credentialsId: 'github', url: 'https://github.com/' + env.GITHUB_ORGANIZATION + '/' + env.GITHUB_REPO + '-helm-chart.git']])
                dir(env.GITHUB_REPO + '-helm-chart') {
                    updateValues.updateDev(tag: env.BUILD_NUMBER)
                    updateValues.updateStage(tag: env.BUILD_NUMBER)
                    updateValues.updateProd(tag: env.BUILD_NUMBER)
                    gitCommit.commitAndPush(email: "jenkins@jenkins.com", organization: env.GITHUB_ORGANIZATION, service: env.GITHUB_REPO + '-helm-chart')
                }
            }
        }
    }
  }
}
